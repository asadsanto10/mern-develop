const express=require("express"),router=express.Router(),bcrypt=require("bcryptjs"),{registerValidators:registerValidators,loginValidators:loginValidators}=require("../validate/validate");require("../db/conn");const User=require("../modal/userSchema");router.get("/",(req,res)=>{res.send("hello world")}),router.post("/register",async(req,res)=>{try{const{name:name,email:email,phone:phone,password:password}=req.body,{error:error}=await registerValidators(req.body);if(error)return res.status(400).json({error:error.details[0]});const userExists=await User.findOne({email:email});if(userExists)return res.status(400).send({error:"email already exists"});const salt=await bcrypt.genSalt(12),hashPassword=await bcrypt.hash(password,salt),user=new User({name:name,email:email,phone:phone,password:hashPassword});await user.save(),res.status(201).json({message:"user register sucessfully"})}catch(err){console.log(err)}}),router.post("/login",async(req,res)=>{res.cookie("santo","afdjskfbjsdbfsdfsfsd");try{const{email:email,password:password}=req.body;if(email&&password){const{error:error}=await loginValidators(req.body);if(error)res.status(400).json({error:error.details[0].message});else{const userLogin=await User.findOne({email:email});if(userLogin){const matchPassword=await bcrypt.compare(password,userLogin.password);if(matchPassword){const authToken=await userLogin.generateAuthToken();res.status(200).json({success:"user login sucessfully"})}else res.status(402).json({error:"Authentication failed password"})}else res.status(402).json({error:"Authentication failed email"})}}else res.status(401).json({error:"All field is required"})}catch(err){console.log(err)}}),module.exports=router;